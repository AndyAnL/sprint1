# Исключить конфиденциальные файлы
authorized_key.json

# Local .terraform directories
.terraform/

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

### Ansible ###
# Файлы с паролями и секретами
*.vault.yml
*.vault
.vault_pass.txt
.vault_pass
.secrets/
.env
*.key
*.pem
*.pub
*.cer
*.csr
*.crt
*.pfx

# Временные файлы выполнения playbook
*.retry

# Конфигурационные файлы (может быть локальным)
ansible.cfg
ansible-local.cfg

# Кэш и инвентари
*.pyc
__pycache__/
.cache/
*.cache

# Galaxy и роли
roles/.galaxy_install_info
galaxy-requirements.yml
requirements.yml.lock

# Игнорируем каталоги с динамическим инвентарём
inventory/*.yml
!inventory/example.yml  # если нужно исключить пример

# Файлы IDE и редакторов
.idea/
.vscode/
*.swp
*.swo

# Логи и временные файлы
*.log
*.tmp